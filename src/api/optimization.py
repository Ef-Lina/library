"""–ú–æ–¥—É–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–æ–¥–±–æ—Ä–∫–∏ –∫–Ω–∏–≥."""
from fastapi import status, HTTPException, APIRouter
from sqlalchemy import select
from src.api.dependencies import SessionDep
from src.models.books import BookModel

router = APIRouter(tags=["–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –∫–Ω–∏–≥ –¥–ª—è —á—Ç–µ–Ω–∏—è üßÆ"])




@router.get("/opt", summary="–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–∏–≥–∏",
            status_code=status.HTTP_200_OK)
async def get_optimal_result(session: SessionDep,
                             days: int, pages: int):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞ –∑–∞–¥–æ–Ω–Ω—ã–µ –¥–Ω–∏ –ø—Ä–∏
    –∑–∞–¥–∞–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–µ–Ω—å.
    """
    max_value, items_count, titles = await show_result(days,
                                                  pages, session)
    if not max_value:
        return {"massage": "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"}
    return {"items_count": items_count, "titles": titles}

def knapsack(weights, values, capacity):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ —Ä—é–∫–∑–∞–∫–µ."""
    n = len(values)
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã dp
    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w],
                               dp[i - 1][w -
                                         weights[i - 1]] + values[i - 1])
            else:
                dp[i][w] = dp[i - 1][w]

    max_value = dp[n][capacity]
    w = capacity
    items_count = 0
    selected_items = []

    # –û–±—Ä–∞—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    for i in range(n, 0, -1):
        if max_value != dp[i - 1][w]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞
                                        # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            selected_items.append(i - 1)  # –ò–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞
            items_count += 1
            w -= weights[i - 1]  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–π—Å—è –µ–º–∫–æ—Å—Ç–∏
            max_value -= values[i - 1]  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                                    # max_value –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

    selected_items.reverse()  # –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ –≤—ã–±–æ—Ä–∞
    return dp[n][capacity], items_count, selected_items



async def show_pages_years(session: SessionDep):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –≥–æ–¥–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
     –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    query = select(BookModel)
    result = await session.execute(query)
    books = result.scalars().all()

    if not books:
        raise HTTPException(status_code=status
                            .HTTP_204_NO_CONTENT,
                            detail="–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞")

    pages_list = [book.pages for book in books]
    years_list = [book.year for book in books]
    titles_list = [book.title for book in books]

    return pages_list, years_list, titles_list


async def show_result(days, pages_per_day, session: SessionDep):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥,
    –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    capacity = days * pages_per_day
    pages_list, years_list, titles_list = await show_pages_years(session)
    max_value, items_count, selected_items = knapsack(
        pages_list, years_list, capacity)
    titles = [titles_list[x] for x in selected_items]
    return max_value, items_count, titles
